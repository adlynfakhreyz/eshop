package id.ac.ui.cs.advprog.eshop.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;

import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;

class ProductTest {
    private Product product;
    private Validator validator;

    @BeforeEach
    void setUp() {
        product = new Product();
        product.setId("eb558e9f-1c39-460e-8860-71af6af63bd6");
        product.setName("Sampo Cap Bambang");
        product.setQuantity(100);

        // Initialize validator for constraint checks
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    void testGetProductId() {
        assertEquals("eb558e9f-1c39-460e-8860-71af6af63bd6", product.getId());
    }

    @Test
    void testGetProductName() {
        assertEquals("Sampo Cap Bambang", product.getName());
    }

    @Test
    void testGetProductQuantity() {
        assertEquals(100, product.getQuantity());
    }

    @Test
    void testProductConstructor_AutoGeneratedId() {
        Product newProduct = new Product("Tablet", 30);
        assertNotNull(newProduct.getId());  // Should generate a UUID
        assertEquals("Tablet", newProduct.getName());
        assertEquals(30, newProduct.getQuantity());
    }

    @Test
    void testSetProductId() {
        product.setId("new-product-id");
        assertEquals("new-product-id", product.getId());
    }

    @Test
    void testSetProductName() {
        product.setName("Sabun Mandi");
        assertEquals("Sabun Mandi", product.getName());
    }

    @Test
    void testSetProductQuantity() {
        product.setQuantity(200);
        assertEquals(200, product.getQuantity());
    }

    @Test
    void testProductName_NotBlank() {
        product.setName("");
        Set<ConstraintViolation<Product>> violations = validator.validate(product);
        assertFalse(violations.isEmpty());
    }

    @Test
    void testProductQuantity_NotNull() {
        product.setQuantity(null);
        Set<ConstraintViolation<Product>> violations = validator.validate(product);
        assertFalse(violations.isEmpty());
    }

    @Test
    void testProductQuantity_MinValue() {
        product.setQuantity(-1);  // Should trigger validation failure
        Set<ConstraintViolation<Product>> violations = validator.validate(product);
        assertFalse(violations.isEmpty());
    }
}
